var data={"title":"Calculator: Temperature unit conversions","body":"<div id=\"topicContentCalculator\" class=\"utdArticleSection\"><div id=\"topicText\">\n<div id=\"mc3k\">\n\n\n\n\n\n<form name=\"Temperature_form\" id=\"Temperature_form\" action=\"\" onsubmit=\"return false;\" onkeydown=\"to_param.value='';\" onkeypress=\"return validNumberField(event);\" onkeyup=\"unitConvert();\">\n<table width=\"100%\" cellpadding=\"4\" cellspacing=\"0\" summary=\"MedCalc 3000 Table\">\n<tr><td bgcolor=\"#eeeeee\" width=\"1%\"><br /></td>\n<td bgcolor=\"#eeeeee\" align=\"left\">\n<span class=\"medCalcFontTitleBox\">\n\nCalculator: Temperature unit conversions\n</span></td></tr></table><br />&nbsp;<br />\n<center>\n<div id=\"calc_main\">\n<div id=\"calc_input\">\n<table summary=\"MedCalc 3000 Table\">\n<tr><td colspan=\"2\"><span class=\"medCalcFontZeroBold\">FROM:</span></td></tr>\n<tr><td align=\"left\"><b><input type=\"text\" name=\"from_param\" size=\"6\" onchange=\"unitConvert();\" /></b></td>\n<td align=\"left\"><b><select name=\"from_unit\" onchange=\"unitConvert();\" style=\"width:200px;\" class=\"medCalcFontSelect\">\n<option value=\"Pull-Down|0|1|0\" selected=\"selected\">Pull-Down</option>\n<option value=\"&#176;C|1|0  \">&#176;C</option>\n<option value=\"&#176;F|.555555555555556|-17.77777777777778\">&#176;F</option>\n</select></b></td></tr>\n<tr><td colspan=\"2\"><span class=\"medCalcFontZeroBold\">TO:</span></td></tr>\n<tr><td align=\"left\"><input type=\"text\" name=\"to_param\" size=\"6\" onfocus=\"blur();\" /></td>\n<td align=\"left\"><b><select name=\"to_unit\" onchange=\"unitConvert();\" style=\"width:200px;\" class=\"medCalcFontSelect\">\n<option value=\"Pull-Down|0|1|0\" selected=\"selected\">Pull-Down</option>\n<option value=\"&#176;C|1|0  \">&#176;C</option>\n<option value=\"&#176;F|.555555555555556|-17.77777777777778\">&#176;F</option>\n</select></b></td></tr></table>\n<br />&nbsp;<br />\n<span class=\"medCalcFontOneBold\">\nSet maximal display precision in decimal points:\n</span>\n<select name=\"decpts\" onchange=\"setDecPts();\" class=\"medCalcFontSelect\">\n<option>0</option>\n<option selected=\"selected\">1</option>\n<option>2</option>\n<option>3</option>\n</select>\n<input type=\"reset\" name=\"reset\" value=\"Reset form\" />\n</div>\n</div>\n</center>\n</form>\n<br />&nbsp;<br />\n\n<div id=\"calc_hints\">\n<span class=\"medCalcFontOne\">\n\n</span>\n \n</div>\n\n\n<div id=\"calc_notes\">\n<span class=\"medCalcFontOneBold\">Notes</span>\n<ul class=\"medCalcFontOne\">\n<li>To make simple unit conversions, select the starting units with the pull-down selector on the right. \nThen type a starting value in the top <b>FROM</b> input box. To convert the value, choose the \nnew unit in the lower right selector. The converted value will appear immediately in the <b>TO</b> box. \n</li>\n\n</ul>\n</div>\n\n</div>\n</div><div id=\"topicAgreement\">Use of UpToDate is subject to the <a href=\"https://www.uptodate.com/legal/license\" class=\"licenseLink\" id=\"sla_in_page\">Subscription and License Agreement</a>.</div><div id=\"printDisclaimer\">\r\n\t<b>Only digits 0 to 9 and a single decimal point (&quot;.&quot;) are acceptable as numeric inputs. Attempted input of other characters into a numeric field may lead to an incorrect result.</b>\r\n\t<p>\r\n\tInformation on this page may not appear correctly if printed. </p>\r\n</div>\r\n<div id=\"disclaimerCalculator\">\r\n\t<div class=\"medCalcFontTwo\">\r\n\t\t<p class=\"header\">Legal Notices and Disclaimer</p>\r\n\t\t<p>\r\n\t\t\tAll information contained in and produced by the EBMcalc system is provided\r\n\t\t\tfor educational purposes only. This information should not be used for the diagnosis or treatment\r\n\t\t\tof any health problem or disease. \r\n\t\t\t<b>THIS INFORMATION IS NOT INTENDED TO REPLACE CLINICAL JUDGMENT OR GUIDE INDIVIDUAL PATIENT CARE IN ANY MANNER.</b>\r\n\t\t\t<a href=\"https://www.uptodate.com/legal/ebmcalc-disclaimer\" class=\"medCalcDisclaimerLink\">Click here for full notice and disclaimer.</a>\r\n\t\t</p>\r\n\t\t<p class=\"copy\">EBMcalc is Copyright &copy; 1998-2018 Foundation Internet Services, LLC</p>\r\n\t</div>\r\n</div><div id=\"topicVersionRevision\">Topic 90337 Version 2.0</div></div>","outline":null,"javascript":"\n/* <![CDATA[ */\n\n\n\n\n\nvar lastChar = '';\n\nfunction log(i){\nreturn Math.log(i) * Math.LOG10E;   \n}\n\nfunction ln(i){\nreturn Math.log(i);\n}\n\nfunction sq(i){\nreturn i * i;\n}\n\nfunction sqr(i){\nreturn Math.sqrt(i);\n}\n\n\nfunction power(x,y){\nreturn Math.pow(x,y);\n}\n\nfunction eTo(x){\nreturn Math.exp(x);\n}\n\n\nfunction fixDP(r, dps) {\nif (isNaN(r)) return \"NaN\";\nvar msign = '';\nif (r < 0) msign = '-';\nx = Math.abs(r);\nif (x > Math.pow(10, 21)) return msign + x.toString();\nvar m = Math.round(x * Math.pow(10, dps)).toString();\nif (dps == 0) return msign + m;\nwhile (m.length <= dps) m = \"0\" + m;\nreturn msign + m.substring(0, m.length - dps) + \".\" + m.substring(m.length - dps);\n}\n\nfunction alertNaN(){\nalert('This field is improperly formatted. You may only input the digits 0-9 and a decimal point.');  \ndoCalc = false; \nclrResults();\n}\n\nfunction validNumberField(event) {\nvar field = event.target;\n\nif(field && field != 'undefined' && field.attributes.type.nodeValue && (field.attributes.type.nodeValue == 'number')) {\nvar val = field.value;\nvar charCode = event.charCode;\nvar key = String.fromCharCode(charCode);\n\nif(charCode == 0 || charCode == 13) {\n  return true;\n}\n\nif(key == ' ') {\nalert('Numeric field cannot contain spaces.');\n  return false;\n}\t\n\t\t\nif(key == '.') { return validDecimalPoint(val, key); }\nif(key == '-') { return validMinus(val, key); }\n\nif(isNaN(parseInt(key))) {\nalertNaN();\nreturn false;\n}\n\t\nreturn validFloat(val, key);\n}\nreturn true;\n}\n\nfunction validDecimalPoint(val, key) {\nif(val.length == 0 && lastChar != '.') {\n  lastChar = '.';\n  return true;\n}\nif(val.indexOf('.') >= 0 || lastChar == '.') {\n alertNaN();\n return false;\n}\nif(validFloat(val, key)) {\n lastChar = key;\n return true;\n}\nlastChar = '';\nreturn false;\n}\n\nfunction validMinus(val, key) {\nif(val.length == 0) {\n  return true;\n}\nif(val.length > 1) {\n alertNaN();\n return false;\n}\nreturn validFloat(val, key);\n}\n\n\nfunction validFloat(val, key) {\nvar currentVal = parseFloat(val + key);\nif(isNaN(val + key) || isNaN(currentVal)) {\nalertNaN();\nreturn false;\n}\nreturn true;\n}\n\nfunction formKeyDown(event) {\nvar field = event.target;\n\nif(field && field != 'undefined' && field.attributes.type.nodeValue && (field.attributes.type.nodeValue == 'number')) {\n  var val = field.value;\n  var keyCode = event.keyCode;\n  if(keyCode == 8 || keyCode == 127) {\n    // backspace or delete\n    if(lastChar == '.') {\n      lastChar = '';\n    }\n    if(field.value.length == 3 && field.value[0] == '0' && field.value[1] == '.') {\n      // this handles a backspace on an input like \".5\", which is saved internally as \"0.5\"\n      //   otherwise, if you leave the field after the backspace, it retains \"0.5\" as the value, most likely an iOS bug\n      field.value = ''; \n    }\n  }\n}\nclrResults();\n}\n\nfunction clrValue(field) {\n field.value = '';\n lastChar = '';\n}\n\nvar currenttimeout;\n\n\n\ncodes = new Array;\ncodeparts = new Array;\nvar dp = 1;\nvar tovalue;\nvar to_selected = 0;\n\nfunction showToValue(){\nwith (document.Temperature_form){\nto_param.value = fixDP(tovalue, dp);\n}}\n\nfunction setDecPts(){\nwith (document.Temperature_form){\ndp = decpts.options[decpts.selectedIndex].text;\nunitConvert();\n}}\n\n\nfunction unitConvert(){\nwith (document.Temperature_form){\n\nif ((to_unit.selectedIndex == 0) || (from_unit.selectedIndex == 0)){ to_param.value = ''; return; }\n\nif (from_param.value && isNaN(from_param.value)){ clrValue(from_param); alertNaN('From Value'); return;}\n\nif (from_param.value > ''){\nunitcode = from_unit.options[from_unit.selectedIndex].value;\ncodeparts = unitcode.split('|');\nfrommult = parseFloat(codeparts[1]);\nfromadd = parseFloat(codeparts[2]);\n\nunitcode = to_unit.options[to_unit.selectedIndex].value;\ncodeparts = unitcode.split('|');\ntomult = parseFloat(codeparts[1]);\ntoadd = parseFloat(codeparts[2]);\n\nfromvalue = parseFloat(from_param.value);\ntovalue = ((fromvalue * frommult + fromadd) - toadd) / tomult;\nshowToValue();\n}}}\n\n/* ]]> */\n"}